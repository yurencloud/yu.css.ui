@import "./varible";
// 动态变量只能通过 map-get这样来实现
@mixin generalAllColorButton() {
  @each $type in $types {
    $color: map-get($colors, $type);
    &.#{$type} {
      color: #fff;
      border: 1px solid $color;
      background-color: $color;
      transition: all .3s ease;
      &.disabled {
        border: 1px solid lighten($color, 25);
        background-color: lighten($color, 25);
        cursor: not-allowed;
      }
      &:hover:not(.disabled), &:focus:not(.disabled) {
        color: #fff;
        border: 1px solid lighten($color, 10);
        background-color: lighten($color, 10);
      }
      &.loading {
        border: 1px solid lighten($color, 15);
        background-color: lighten($color, 15);
      }
    }
  }
}

@mixin generalAllColorPlainButton() {
  @each $type in $types {
    $color: map-get($colors, $type);
    &.#{$type} {
      color: $color;
      border: 1px solid $color;
      background-color: lighten($color, 25);
      transition: all .3s ease;
      &.disabled {
        color: lighten($color, 25);
        border: 1px solid lighten($color, 25);
        background-color: lighten($color, 50);
        cursor: not-allowed;
      }
      &:hover:not(.disabled), &:focus:not(.disabled) {
        border: 1px solid $color;
        background-color: $color;
        color: #fff;
      }
    }
  }
}

@mixin generalAllSizeInput() {
  @each $size in $sizes {
    &.#{$size} {
      $height: map-get($size-map, $size);
      input {
        height: $height;
        line-height: $height;
        @if $height > $small-height {
          font-size: $normal
        } @else {
          font-size: $tiny
        }
      }
      span.prefix {
        line-height: $height;
        i {
          @if $height > $small-height {
            font-size: $normal
          } @else {
            font-size: $tiny
          }
        }
      }
      span.suffix {
        line-height: $height;
        i {
          @if $height > $small-height {
            font-size: $normal
          } @else {
            font-size: $tiny
          }
        }
      }
      span.clearable {
        line-height: $height;
        i {
          @if $height > $small-height {
            font-size: $normal
          } @else {
            font-size: $tiny
          }
        }
      }
    }
  }
}

@mixin generalAllColorSwitch() {
  @each $type in $types {
    $color: map-get($colors, $type);
    &.#{$type} {
      background-color: $color;
      transition: all .3s ease;
      &.disabled {
        background-color: lighten($color, 25);
      }
    }
  }
}

@mixin generalAllColorMessage() {
  @each $type in $types {
    $color: map-get($colors, $type);
    &.#{$type} {
      background-color: lighten($color, 35);
      color: $color;
      border: 1px solid lighten($color, 20);
    }
  }
}

@mixin generalAllColorTag() {
  @each $type in $types {
    $color: map-get($colors, $type);
    &.#{$type} {
      border: $color;
      @if $type == 'danger' {
        background-color:lighten($color, 25)
      }
      @else {
        background-color:lighten($color, 35)
      };
      color: $color;
      border: 1px solid lighten($color, 20);
    }
  }
}


@mixin generalAllSizeTag() {
  @each $size in $sizes {
    &.#{$size} {
      $height: map-get($size-map, $size);
      height: $height;
      line-height: $height;
      @if $height > $small-height {
        font-size: $normal
      } @else {
        font-size: $tiny
      }
    }
  }
}






